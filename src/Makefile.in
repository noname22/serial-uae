#
# Makefile.in for UAE
#

@SET_MAKE@
CC        = @CC@
WRC       = @WRCPRG@
CPP       = @CPP@
LDFLAGS   = @LDFLAGS@
CFLAGS    = @CFLAGS@ -D__inline__=@ac_cv_c_inline@ \
		-DSYSTEM_ROMDIR=\"$(datadir)/uae/roms\" \
		-DSYSTEM_CFGDIR=\"$(datadir)/uae/configs\"
X_CFLAGS  = @X_CFLAGS@ @GTK_CFLAGS@ -DSHM_SUPPORT_LINKS=@SHM_SUPPORT_LINKS@
TARGET    = @TARGET@
LIBRARIES = @LIBRARIES@ @LIBS@ @GTK_LIBS@
MATHLIB   = @MATHLIB@
RESOBJS   = @RESOBJS@

NO_SCHED_CFLAGS = @NO_SCHED_CFLAGS@

INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA    = @INSTALL_DATA@
prefix          = @prefix@
datarootdir     = @datarootdir@
datadir         = @datadir@
exec_prefix     = @exec_prefix@
bindir          = @bindir@
libdir          = @libdir@
sysconfdir      = @sysconfdir@

VPATH = @top_srcdir@/src

.SUFFIXES: .o .c .h .m .i .S .rc .res

#.SECONDARY: cpuemu.c cpustbl.c cputbl.h

INCLUDES=-I. -I@top_srcdir@/src/include/

OBJS =  main.o newcpu.o memory.o @CPUOBJS@ custom.o cia.o serial.o blitter.o \
	autoconf.o ersatz.o filesys.o hardfile.o keybuf.o expansion.o zfile.o \
	fpp.o readcpu.o cpudefs.o gfxutil.o traps.o blitfunc.o blittable.o \
	gayle.o rommgr.o disk.o audio.o drawing.o cpustbl.o inputdevice.o \
	uaelib.o picasso96.o uaeexe.o bsdsocket.o bsdsocket-posix-new.o \
	missing.o \
	sd-sound.o od-joy.o md-support.o \
	fsusage.o cfgfile.o native2amiga.o fsdb.o identify.o timemgr.o crc32.o \
	savestate.o writelog.o \
	hotkeys.o keymap/keymap.o keymap/x11pc_rawkeys.o \
	sinctable.o \
	@ASMOBJS@ @GFXOBJS@ @GUIOBJS@ @DEBUGOBJS@ @SCSIOBJS@ @FSDBOBJS@


all: $(TARGET)

x11: progs

svgalib: progs

win32: progs $(RESOBJS)
	$(WRC) $(RESOBJS) uae.exe

ggilib: progs

asciiart: progs

amigaos: progs

p_os: progs

beos: progs

next: progs
	cp uae ../Uae.app/Uae

progs: uae readdisk

install:

readdisk: readdisk.o missing.o
	$(CC) readdisk.o missing.o -o readdisk $(LDFLAGS) $(DEBUGFLAGS)

uae: $(OBJS)
	$(CC) $(OBJS) -o uae $(GFXLDFLAGS) $(LDFLAGS) $(DEBUGFLAGS) $(LIBRARIES) $(MATHLIB)

clean:
	$(MAKE) -C tools clean
	-rm -f $(OBJS) *.o uae readdisk
	-rm -f blit.h cpudefs.c
	-rm -f cpuemu.c build68k cputmp.s cpustbl.c cputbl.h
	-rm -f blitfunc.c blitfunc.h blittable.c

halfclean:
	-rm -f $(OBJS)

streifenfrei: clean
	$(MAKE) -C tools streifenfrei
	-rm -f Makefile sysconfig.h
	-rm -f od-joy.c md-X86.S sd-sound.c md-support.c
	-rm -f machdep osdep threaddep sounddep target.h
	-rm -f md-fpp.h

blit.h: tools/genblitter
	./tools/genblitter i >blit.h
blitfunc.c: tools/genblitter blitfunc.h
	./tools/genblitter f >blitfunc.c
blitfunc.h: tools/genblitter
	./tools/genblitter h >blitfunc.h
blittable.c: tools/genblitter blitfunc.h
	./tools/genblitter t >blittable.c

tools/genblitter:
	$(MAKE) -C tools genblitter
tools/build68k:
	$(MAKE) -C tools build68kc
tools/gencpu: 
	$(MAKE) -C tools gencpu

custom.o: blit.h
drawing.o: linetoscr.c

cpudefs.c: tools/build68k @top_srcdir@/src/table68k
	./tools/build68k <@top_srcdir@/src/table68k >cpudefs.c

cpuemu.c: tools/gencpu
	./tools/gencpu

# gencpu also creates cpustbl.c and cputbl.h
cpustbl.c: cpuemu.c
cputbl.h: cpuemu.c

console_missing.o: missing.c
	$(CC) $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $(CFLAGS_$@) $< -o $@

osdep/beos.o: osdep/beos.cpp
	$(CC) $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) osdep/beos.cpp -o osdep/beos.o

.rc.res:
	$(WRC) $(INCLUDES) $<
.m.o:
	$(CC) $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $<
.c.o:
	$(CC) $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $(CFLAGS_$@) $< -o $@
.c.s:
	$(CC) $(INCLUDES) -S $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
.c.i:
	$(CC) $(INCLUDES) -E $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< > $@
.S.o:
	$(CC) $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
.s.o:
	$(CC) $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@

# Saves recompiling...
touch:
	touch *.o; touch build68k; touch cpudefs.c; touch cpudefs.o; touch gencpu; touch cpuemu.c; touch cpuemu.o

build68k.o: include/readcpu.h
readcpu.o: include/readcpu.h

cia.o: include/events.h
custom.o: include/events.h blit.h
newcpu.o: include/events.h
audio.o: include/events.h
disk.o: include/events.h
blitter.o: include/events.h blit.h

# sam: this is for people with low memory. (is there a way do do this with a single rule ?)
cpuemu1.o: cpuemu.c
	$(CC) -DPART_1 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu2.o: cpuemu.c
	$(CC) -DPART_2 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu3.o: cpuemu.c
	$(CC) -DPART_3 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu4.o: cpuemu.c
	$(CC) -DPART_4 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu5.o: cpuemu.c
	$(CC) -DPART_5 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu6.o: cpuemu.c
	$(CC) -DPART_6 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu7.o: cpuemu.c
	$(CC) -DPART_7 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
cpuemu8.o: cpuemu.c
	$(CC) -DPART_8 $(INCLUDES) -c $(INCDIRS) $(CFLAGS) $(X_CFLAGS) $(DEBUGFLAGS) $< -o $@
